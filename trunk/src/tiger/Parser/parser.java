
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 17 12:29:21 CST 2010
//----------------------------------------------------

package tiger.Parser;

import java_cup.runtime.*;
import tiger.Absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 17 12:29:21 CST 2010
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\006\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\006\000\002" +
    "\003\005\000\002\003\010\000\002\003\006\000\002\003" +
    "\010\000\002\003\006\000\002\003\012\000\002\003\003" +
    "\000\002\003\007\000\002\003\006\000\002\005\003\000" +
    "\002\005\005\000\002\004\003\000\002\004\005\000\002" +
    "\006\005\000\002\006\007\000\002\007\003\000\002\007" +
    "\006\000\002\007\006\000\002\007\005\000\002\011\003" +
    "\000\002\011\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\013\003\000\002\013\004\000\002" +
    "\012\006\000\002\014\003\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\015\005\000\002\015\007" +
    "\000\002\016\006\000\002\016\010\000\002\020\003\000" +
    "\002\020\004\000\002\017\011\000\002\017\010\000\002" +
    "\017\013\000\002\017\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\070\002\ufffe\006\ufffe\007\ufffe\010\ufffe\012" +
    "\ufffe\014\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\025\ufffe" +
    "\027\ufffe\031\ufffe\033\ufffe\035\ufffe\037\ufffe\040\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\001\002\000\030\005\021\011" +
    "\007\013\013\015\016\016\010\024\006\030\017\040\005" +
    "\055\004\056\014\057\012\001\002\000\030\005\021\011" +
    "\007\013\013\015\016\016\010\024\006\030\017\040\005" +
    "\055\004\056\014\057\012\001\002\000\004\056\213\001" +
    "\002\000\070\002\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\014\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\027" +
    "\ufffd\031\ufffd\033\ufffd\035\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\001\002\000\004\002\212\001\002" +
    "\000\070\002\uffff\006\uffff\007\uffff\010\uffff\012\uffff\014" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\025\uffff\027\uffff" +
    "\031\uffff\033\uffff\035\uffff\037\uffff\040\uffff\041\uffff\042" +
    "\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff" +
    "\051\uffff\052\uffff\001\002\000\030\005\021\011\007\013" +
    "\013\015\016\016\010\024\006\030\017\040\005\055\004" +
    "\056\014\057\012\001\002\000\102\002\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\014\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\025\uffd9\027\uffd9\030\162\031\uffd9\032\161\033" +
    "\uffd9\034\160\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\001\002\000\034\002\000" +
    "\037\034\040\030\041\040\042\031\043\035\044\033\045" +
    "\041\046\036\047\037\050\032\051\027\052\042\001\002" +
    "\000\010\012\077\022\075\023\074\001\002\000\032\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\030\017" +
    "\031\062\040\005\055\004\056\014\057\012\001\002\000" +
    "\076\002\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\014\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\027\ufffc\031" +
    "\ufffc\032\022\033\ufffc\035\ufffc\036\024\037\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\023\001\002\000\070" +
    "\002\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\014\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\025\uffe2\027\uffe2\031\uffe2" +
    "\033\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\001\002\000\030\005\021\011\007\013\013\015" +
    "\016\016\010\024\006\030\017\040\005\055\004\056\014" +
    "\057\012\001\002\000\030\005\021\011\007\013\013\015" +
    "\016\016\010\024\006\030\017\040\005\055\004\056\014" +
    "\057\012\001\002\000\004\056\025\001\002\000\076\002" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\025\uffd6\027\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\001\002\000\070\002\uffee" +
    "\006\uffee\007\uffee\010\uffee\012\uffee\014\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\025\uffee\027\uffee\031\uffee\033\uffee" +
    "\035\uffee\037\034\040\030\041\040\042\031\043\035\044" +
    "\033\045\041\046\036\047\037\050\032\051\027\052\042" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\030\005\021\011\007\013\013\015\016\016" +
    "\010\024\006\030\017\040\005\055\004\056\014\057\012" +
    "\001\002\000\070\002\ufff6\006\ufff6\007\ufff6\010\ufff6\012" +
    "\ufff6\014\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6" +
    "\027\ufff6\031\ufff6\033\ufff6\035\ufff6\037\034\040\030\041" +
    "\040\042\031\043\035\044\033\045\041\046\036\047\037" +
    "\050\032\051\ufff6\052\ufff6\001\002\000\054\002\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\014\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2\033\ufff2\035" +
    "\ufff2\037\034\040\030\041\040\042\031\051\ufff2\052\ufff2" +
    "\001\002\000\070\002\ufff8\006\ufff8\007\ufff8\010\ufff8\012" +
    "\ufff8\014\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8" +
    "\027\ufff8\031\ufff8\033\ufff8\035\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\001\002\000\054\002\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\027\ufff0\031\ufff0\033\ufff0\035" +
    "\ufff0\037\034\040\030\041\040\042\031\051\ufff0\052\ufff0" +
    "\001\002\000\054\002\ufff1\006\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\014\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1" +
    "\027\ufff1\031\ufff1\033\ufff1\035\ufff1\037\034\040\030\041" +
    "\040\042\031\051\ufff1\052\ufff1\001\002\000\054\002\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\012\ufff4\014\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\025\ufff4\027\ufff4\031\ufff4\033\ufff4" +
    "\035\ufff4\037\034\040\030\041\040\042\031\051\ufff4\052" +
    "\ufff4\001\002\000\070\002\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\012\ufffa\014\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025" +
    "\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\037\ufffa\040\ufffa" +
    "\041\040\042\031\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000\054\002\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3\020\ufff3\021" +
    "\ufff3\022\ufff3\023\ufff3\025\ufff3\027\ufff3\031\ufff3\033\ufff3" +
    "\035\ufff3\037\034\040\030\041\040\042\031\051\ufff3\052" +
    "\ufff3\001\002\000\054\002\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\014\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025" +
    "\uffef\027\uffef\031\uffef\033\uffef\035\uffef\037\034\040\030" +
    "\041\040\042\031\051\uffef\052\uffef\001\002\000\070\002" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\025\ufff7\027\ufff7\031\ufff7\033" +
    "\ufff7\035\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\001\002\000\070\002\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\014\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\025" +
    "\ufff9\027\ufff9\031\ufff9\033\ufff9\035\ufff9\037\ufff9\040\ufff9" +
    "\041\040\042\031\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\001\002\000\070\002\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\025\ufff5\027\ufff5\031\ufff5\033\ufff5" +
    "\035\ufff5\037\034\040\030\041\040\042\031\043\035\044" +
    "\033\045\041\046\036\047\037\050\032\051\ufff5\052\ufff5" +
    "\001\002\000\034\033\060\037\034\040\030\041\040\042" +
    "\031\043\035\044\033\045\041\046\036\047\037\050\032" +
    "\051\027\052\042\001\002\000\076\002\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\012\uffd8\014\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\025\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\001\002\000\004\031\066\001\002\000\070" +
    "\002\uffea\006\uffea\007\uffea\010\uffea\012\uffea\014\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\025\uffea\027\uffea\031\uffea" +
    "\033\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\001\002\000\040\010\uffdf\027\064\031\uffdf\037" +
    "\034\040\030\041\040\042\031\043\035\044\033\045\041" +
    "\046\036\047\037\050\032\051\027\052\042\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\030\017\040\005\055\004\056\014\057\012\001\002\000" +
    "\006\010\uffde\031\uffde\001\002\000\070\002\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\012\uffeb\014\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb\033\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\001\002" +
    "\000\012\012\uffd2\014\uffd2\022\uffd2\023\uffd2\001\002\000" +
    "\012\012\uffd3\014\uffd3\022\uffd3\023\uffd3\001\002\000\012" +
    "\012\uffd1\014\uffd1\022\uffd1\023\uffd1\001\002\000\012\012" +
    "\077\014\uffc5\022\uffc5\023\uffc5\001\002\000\012\012\uffd0" +
    "\014\uffd0\022\075\023\uffd0\001\002\000\004\056\147\001" +
    "\002\000\004\056\134\001\002\000\012\012\077\014\uffd5" +
    "\022\075\023\074\001\002\000\004\056\105\001\002\000" +
    "\004\014\101\001\002\000\032\005\021\010\103\011\007" +
    "\013\013\015\016\016\010\024\006\030\017\040\005\055" +
    "\004\056\014\057\012\001\002\000\004\010\104\001\002" +
    "\000\070\002\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\014" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\025\uffe0\027\uffe0" +
    "\031\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\070\002\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\012\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\025\uffe1\027\uffe1\031\uffe1\033\uffe1\035\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\001\002\000" +
    "\004\030\106\001\002\000\006\031\111\056\107\001\002" +
    "\000\004\026\127\001\002\000\004\031\120\001\002\000" +
    "\006\026\113\043\112\001\002\000\030\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\030\017\040\005\055" +
    "\004\056\014\057\012\001\002\000\004\056\114\001\002" +
    "\000\004\043\115\001\002\000\030\005\021\011\007\013" +
    "\013\015\016\016\010\024\006\030\017\040\005\055\004" +
    "\056\014\057\012\001\002\000\042\012\uffc0\014\uffc0\022" +
    "\uffc0\023\uffc0\037\034\040\030\041\040\042\031\043\035" +
    "\044\033\045\041\046\036\047\037\050\032\051\027\052" +
    "\042\001\002\000\042\012\uffc2\014\uffc2\022\uffc2\023\uffc2" +
    "\037\034\040\030\041\040\042\031\043\035\044\033\045" +
    "\041\046\036\047\037\050\032\051\027\052\042\001\002" +
    "\000\006\026\122\043\121\001\002\000\030\005\021\011" +
    "\007\013\013\015\016\016\010\024\006\030\017\040\005" +
    "\055\004\056\014\057\012\001\002\000\004\056\123\001" +
    "\002\000\004\043\124\001\002\000\030\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\030\017\040\005\055" +
    "\004\056\014\057\012\001\002\000\042\012\uffc1\014\uffc1" +
    "\022\uffc1\023\uffc1\037\034\040\030\041\040\042\031\043" +
    "\035\044\033\045\041\046\036\047\037\050\032\051\027" +
    "\052\042\001\002\000\042\012\uffc3\014\uffc3\022\uffc3\023" +
    "\uffc3\037\034\040\030\041\040\042\031\043\035\044\033" +
    "\045\041\046\036\047\037\050\032\051\027\052\042\001" +
    "\002\000\004\056\130\001\002\000\010\025\131\031\uffc9" +
    "\035\uffc9\001\002\000\004\056\107\001\002\000\006\031" +
    "\uffc8\035\uffc8\001\002\000\004\014\uffd4\001\002\000\004" +
    "\043\135\001\002\000\010\004\141\034\137\056\136\001" +
    "\002\000\012\012\uffcd\014\uffcd\022\uffcd\023\uffcd\001\002" +
    "\000\006\035\145\056\107\001\002\000\012\012\uffce\014" +
    "\uffce\022\uffce\023\uffce\001\002\000\004\017\142\001\002" +
    "\000\004\056\143\001\002\000\012\012\uffca\014\uffca\022" +
    "\uffca\023\uffca\001\002\000\004\035\146\001\002\000\012" +
    "\012\uffcb\014\uffcb\022\uffcb\023\uffcb\001\002\000\012\012" +
    "\uffcc\014\uffcc\022\uffcc\023\uffcc\001\002\000\006\026\150" +
    "\053\151\001\002\000\004\056\153\001\002\000\030\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\030\017" +
    "\040\005\055\004\056\014\057\012\001\002\000\042\012" +
    "\uffc7\014\uffc7\022\uffc7\023\uffc7\037\034\040\030\041\040" +
    "\042\031\043\035\044\033\045\041\046\036\047\037\050" +
    "\032\051\027\052\042\001\002\000\004\053\154\001\002" +
    "\000\030\005\021\011\007\013\013\015\016\016\010\024" +
    "\006\030\017\040\005\055\004\056\014\057\012\001\002" +
    "\000\042\012\uffc6\014\uffc6\022\uffc6\023\uffc6\037\034\040" +
    "\030\041\040\042\031\043\035\044\033\045\041\046\036" +
    "\047\037\050\032\051\027\052\042\001\002\000\012\012" +
    "\uffcf\014\uffcf\022\uffcf\023\uffcf\001\002\000\012\012\uffc4" +
    "\014\uffc4\022\uffc4\023\uffc4\001\002\000\006\035\177\056" +
    "\175\001\002\000\030\005\021\011\007\013\013\015\016" +
    "\016\010\024\006\030\017\040\005\055\004\056\014\057" +
    "\012\001\002\000\032\005\021\011\007\013\013\015\016" +
    "\016\010\024\006\030\017\031\164\040\005\055\004\056" +
    "\014\057\012\001\002\000\004\031\170\001\002\000\070" +
    "\002\uffec\006\uffec\007\uffec\010\uffec\012\uffec\014\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\025\uffec\027\uffec\031\uffec" +
    "\033\uffec\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\001\002\000\036\025\166\031\uffdd\037\034\040" +
    "\030\041\040\042\031\043\035\044\033\045\041\046\036" +
    "\047\037\050\032\051\027\052\042\001\002\000\030\005" +
    "\021\011\007\013\013\015\016\016\010\024\006\030\017" +
    "\040\005\055\004\056\014\057\012\001\002\000\004\031" +
    "\uffdc\001\002\000\070\002\uffed\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\014\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025" +
    "\uffed\027\uffed\031\uffed\033\uffed\035\uffed\037\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\001\002\000\034\033\172" +
    "\037\034\040\030\041\040\042\031\043\035\044\033\045" +
    "\041\046\036\047\037\050\032\051\027\052\042\001\002" +
    "\000\100\002\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\017\173\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7" +
    "\027\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\001" +
    "\002\000\030\005\021\011\007\013\013\015\016\016\010" +
    "\024\006\030\017\040\005\055\004\056\014\057\012\001" +
    "\002\000\070\002\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\014\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\025\uffe7\027" +
    "\uffe7\031\uffe7\033\uffe7\035\uffe7\037\034\040\030\041\040" +
    "\042\031\043\035\044\033\045\041\046\036\047\037\050" +
    "\032\051\027\052\042\001\002\000\004\043\201\001\002" +
    "\000\004\035\200\001\002\000\070\002\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\012\uffe8\014\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\025\uffe8\027\uffe8\031\uffe8\033\uffe8\035\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002\000" +
    "\070\002\uffe9\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\027\uffe9\031" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\001\002\000\030\005\021\011\007\013\013" +
    "\015\016\016\010\024\006\030\017\040\005\055\004\056" +
    "\014\057\012\001\002\000\036\025\203\035\uffdb\037\034" +
    "\040\030\041\040\042\031\043\035\044\033\045\041\046" +
    "\036\047\037\050\032\051\027\052\042\001\002\000\004" +
    "\056\175\001\002\000\004\035\uffda\001\002\000\034\020" +
    "\206\037\034\040\030\041\040\042\031\043\035\044\033" +
    "\045\041\046\036\047\037\050\032\051\027\052\042\001" +
    "\002\000\030\005\021\011\007\013\013\015\016\016\010" +
    "\024\006\030\017\040\005\055\004\056\014\057\012\001" +
    "\002\000\070\002\uffe6\006\uffe6\007\210\010\uffe6\012\uffe6" +
    "\014\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\027" +
    "\uffe6\031\uffe6\033\uffe6\035\uffe6\037\034\040\030\041\040" +
    "\042\031\043\035\044\033\045\041\046\036\047\037\050" +
    "\032\051\027\052\042\001\002\000\030\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\030\017\040\005\055" +
    "\004\056\014\057\012\001\002\000\070\002\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\014\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\025\uffe5\027\uffe5\031\uffe5\033\uffe5\035\uffe5" +
    "\037\034\040\030\041\040\042\031\043\035\044\033\045" +
    "\041\046\036\047\037\050\032\051\027\052\042\001\002" +
    "\000\004\002\001\001\002\000\004\053\214\001\002\000" +
    "\030\005\021\011\007\013\013\015\016\016\010\024\006" +
    "\030\017\040\005\055\004\056\014\057\012\001\002\000" +
    "\034\021\216\037\034\040\030\041\040\042\031\043\035" +
    "\044\033\045\041\046\036\047\037\050\032\051\027\052" +
    "\042\001\002\000\030\005\021\011\007\013\013\015\016" +
    "\016\010\024\006\030\017\040\005\055\004\056\014\057" +
    "\012\001\002\000\034\006\220\037\034\040\030\041\040" +
    "\042\031\043\035\044\033\045\041\046\036\047\037\050" +
    "\032\051\027\052\042\001\002\000\030\005\021\011\007" +
    "\013\013\015\016\016\010\024\006\030\017\040\005\055" +
    "\004\056\014\057\012\001\002\000\070\002\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\012\uffe3\014\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3\035\uffe3" +
    "\037\034\040\030\041\040\042\031\043\035\044\033\045" +
    "\041\046\036\047\037\050\032\051\027\052\042\001\002" +
    "\000\034\006\223\037\034\040\030\041\040\042\031\043" +
    "\035\044\033\045\041\046\036\047\037\050\032\051\027" +
    "\052\042\001\002\000\030\005\021\011\007\013\013\015" +
    "\016\016\010\024\006\030\017\040\005\055\004\056\014" +
    "\057\012\001\002\000\070\002\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\012\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\025\uffe4\027\uffe4\031\uffe4\033\uffe4\035\uffe4\037\034\040" +
    "\030\041\040\042\031\043\035\044\033\045\041\046\036" +
    "\047\037\050\032\051\027\052\042\001\002\000\070\002" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\012\ufffb\014\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\025\ufffb\027\ufffb\031\ufffb\033" +
    "\ufffb\035\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\010\003\014\007\017\001\001\000" +
    "\002\001\001\000\006\003\224\007\017\001\001\000\006" +
    "\003\221\007\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\204" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\075\011\077\012\072\013\067\016\066\017\071" +
    "\020\070\001\001\000\010\003\062\005\060\007\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\056" +
    "\007\017\001\001\000\006\003\025\007\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\055\007\017\001\001\000\006\003\054\007\017\001" +
    "\001\000\006\003\053\007\017\001\001\000\006\003\052" +
    "\007\017\001\001\000\006\003\051\007\017\001\001\000" +
    "\006\003\050\007\017\001\001\000\006\003\047\007\017" +
    "\001\001\000\006\003\046\007\017\001\001\000\006\003" +
    "\045\007\017\001\001\000\006\003\044\007\017\001\001" +
    "\000\006\003\043\007\017\001\001\000\006\003\042\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\062\005\064\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\071\020\156\001\001\000\006\012\072\013\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\010\075\011" +
    "\132\012\072\013\067\016\066\017\071\020\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\062\005" +
    "\101\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\116\007\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\115\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\125\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\124\007\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\137\001\001\000\002\001\001" +
    "\000\004\015\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\151\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\154\007\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\175\001\001\000\006\003\170\007\017\001" +
    "\001\000\010\003\164\004\162\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\164\004\166\007\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\173\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\201\007\017\001\001\000\002\001\001\000\004" +
    "\006\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\206\007\017\001\001\000\002\001\001\000\006" +
    "\003\210\007\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\214\007\017\001\001" +
    "\000\002\001\001\000\006\003\216\007\017\001\001\000" +
    "\002\001\001\000\006\003\220\007\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\223\007\017\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public tiger.Symbol.Symbol symbol(String ID) {
		return tiger.Symbol.Symbol.symbol(ID);
	}

	/* Change the method report_error so it will display the line and
	   column of where the error occurred in the input as well as the
	   reason for the error which is passed into the method in the
	   String 'message'. */
	public void report_error(String message, Object info) {

		/* Create a StringBuffer called 'm' with the string 'Error' in it. */
		StringBuffer m = new StringBuffer("Error");

		/* Check if the information passed to the method is the same
		   type as the type java_cup.runtime.Symbol. */
		if (info instanceof java_cup.runtime.Symbol) {
			/* Declare a java_cup.runtime.Symbol object 's' with the
			   information in the object info that is being typecasted
			   as a java_cup.runtime.Symbol object. */
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

			/* Check if the line number in the input is greater or
			   equal to zero. */
			if (s.left >= 0) {
				/* Add to the end of the StringBuffer error message
				   the line number of the error in the input. */
				m.append(" in line "+(s.left+1));   
				/* Check if the column number in the input is greater
				   or equal to zero. */
				if (s.right >= 0)
					/* Add to the end of the StringBuffer error message
					   the column number of the error in the input. */
					m.append(", column "+(s.right+1));
			}
		}

		/* Add to the end of the StringBuffer error message created in
		   this method the message that was passed into this method. */
		m.append(" : "+message);

		/* Print the contents of the StringBuffer 'm', which contains
		   an error message, out on a line. */
		System.err.println(m);
	}

	/* Change the method report_fatal_error so when it reports a fatal
	   error it will display the line and column number of where the
	   fatal error occurred in the input as well as the reason for the
	   fatal error which is passed into the method in the object
	   'message' and then exit.*/
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	static tiger.Symbol.Symbol symbol(String s) {
		return tiger.Symbol.Symbol.symbol(s);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcDecl ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(fleft, fright, symbol(i), null, new NameTy(tyleft, tyright, symbol(ty)), e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funcDecl ::= FUNCTION ID LPAREN typeFields RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		FieldList tfields = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(fleft, fright, symbol(i), tfields, new NameTy(tyleft, tyright, symbol(ty)), e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funcDecl ::= FUNCTION ID LPAREN RPAREN EQ expr 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(fleft, fright, symbol(i), null, null, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funcDecl ::= FUNCTION ID LPAREN typeFields RPAREN EQ expr 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		FieldList tfields = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(fleft, fright, symbol(i), tfields, null, e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funcDeclList ::= funcDecl funcDeclList 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec flist = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionDec(f.line, f.colume, f.name, f.params, f.result, f.body, flist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funcDeclList ::= funcDecl 
            {
              FunctionDec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varDecl ::= VAR ID COLON ID ASSIGN expr 
            {
              VarDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(vleft, vright, symbol(i), new NameTy(tleft, tright, symbol(t)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varDecl ::= VAR ID ASSIGN expr 
            {
              VarDec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDec(vleft, vright, symbol(i), null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typeFields ::= ID COLON ID COMMA typeFields 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldList tfields = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldList(i1left, i2left, symbol(i1), symbol(i2), tfields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeFields",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typeFields ::= ID COLON ID 
            {
              FieldList RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldList(i1left, i2left, symbol(i1), symbol(i2), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeFields",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type ::= ARRAY OF ID 
            {
              Ty RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayTy(aleft, aright, symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type ::= LBRACE RBRACE 
            {
              Ty RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(lleft, lright, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type ::= LBRACE typeFields RBRACE 
            {
              Ty RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tfieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldList tfields = (FieldList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordTy(lleft, lright, tfields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type ::= ID 
            {
              Ty RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameTy(ileft, iright, symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // typeDecl ::= TYPE ID EQ type 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ty t1 = (Ty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeDec(tleft, tright, symbol(i), t1, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typeDeclList ::= typeDecl typeDeclList 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec l = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TypeDec(t.line, t.colume, t.name, t.ty, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typeDeclList ::= typeDecl 
            {
              TypeDec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeDeclList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl ::= funcDeclList 
            {
              Dec RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDec f = (FunctionDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // decl ::= varDecl 
            {
              Dec RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec v = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // decl ::= typeDeclList 
            {
              Dec RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TypeDec t = (TypeDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declList ::= decl declList 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList dlist = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, dlist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declList ::= decl 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldVar(lleft, lright, l, symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lvalue ::= ID LBRACK expr RBRACK 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(ileft, iright, new SimpleVar(ileft, iright, symbol(i)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Var RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SubscriptVar(lleft, lright, l, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lvalue ::= ID 
            {
              Var RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(ileft, iright, symbol(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fieldList ::= ID EQ expr COMMA fieldList 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int flistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldExpList flist = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldExpList(ileft, iright, symbol(i), e, flist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fieldList ::= ID EQ expr 
            {
              FieldExpList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FieldExpList(ileft, iright, symbol(i), e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exprList ::= expr COMMA exprList 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList elist = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exprList ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprSeq ::= expr SEMI exprSeq 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList eseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, eseq); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSeq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exprSeq ::= expr 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSeq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LET declList IN END 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DecList dlist = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetExp(lleft, lright, dlist, new SeqExp(endleft, endright, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= LET declList IN exprSeq END 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DecList dlist = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LetExp(lleft, lright, dlist, new SeqExp(eseqleft, eseqright, eseq)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= BREAK 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BreakExp(bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForExp(fleft, fright, new VarDec(ileft, iright, symbol(i), new NameTy(ileft, iright, symbol("int")), e1), e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, iright, e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= IF expr THEN expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(ileft, iright, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= ID LBRACK expr RBRACK OF expr 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayExp(ileft, iright, symbol(i), e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ID LBRACE RBRACE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RecordExp(ileft, iright, symbol(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ID LBRACE fieldList RBRACE 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int flistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldExpList flist = (FieldExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordExp(ileft, iright, symbol(i), flist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= LPAREN RPAREN 
            {
              Exp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(lpleft, lpright, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LPAREN exprSeq RPAREN 
            {
              Exp RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eseqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eseqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList eseq = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SeqExp(lpleft, lpright, eseq); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(ileft, iright, symbol(i), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= ID LPAREN exprList RPAREN 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList elist = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(ileft, iright, symbol(i), elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(lleft, lright, l, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr GE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.GE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr LE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.LE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr LT expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr NEQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.NE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr EQ expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.EQ, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr AND expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1.line, e1.colume, e1, e2, new IntExp(e1.line, e1.colume, 0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr OR expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(e1.line, e1.colume, e1, new IntExp(e1.line, e1.colume, 1), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.DIV, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr TIMES expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.MUL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr MINUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr PLUS expr 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(e1.line, e1.colume, e1, OpExp.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= MINUS expr 
            {
              Exp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(mleft, mright, new IntExp(e.line, e.colume, 0), OpExp.MINUS, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= lvalue 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var l = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(l.line, l.colume, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NIL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(nleft, nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= NUM 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(ileft, iright, i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= STRING 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringExp(sleft, sright, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Exp)e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

